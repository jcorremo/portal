pipeline {
    agent { 
        label 'nodejs'
    }

 tools {
  nodejs "NodeJS"
 }

 environment {
  APPLICATION_NAME = 'portal'
  GIT_REPO = "http://gitlab.innovacioneveris.tech/producto-digital/01-app-web-carro-compras.git"
  GIT_BRANCH = "master"
  STAGE_TAG = "promoteToProduction"
  DEV_PROJECT = "dev-application"
  STAGE_PROJECT = "poc-prod"
  TEMPLATE_NAME = "portal"
  ARTIFACT_FOLDER = "dist"
  RESOURCES_FOLDER = "${ARTIFACT_FOLDER}/POC-grupo-aval/"
  ARTIFACT = "${APPLICATION_NAME}_${BUILD_NUMBER}.tar.gz"
  PORT = 8080;
  
 }

 stages {
  stage("Install Dependencies") {
   steps {
    sh 'rm -rf node_modules'
    sh 'rm package-lock.json'
    sh 'npm remove -g @angular/cli'
    sh 'npm install -g @angular/cli@7.3.9'
    sh 'npm install'
   }
  }
  stage('Build') {
   steps {
    sh 'ng build'
   }
  }


  stage('Static code analysis') {
   environment {
    scannerHome = tool 'sonar'
   }
   steps {
    withSonarQubeEnv('sonarqube') {
     sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=${APPLICATION_NAME} -Dsonar.projectName=${APPLICATION_NAME} -Dsonar.projectVersion=1.0 -Dsonar.sources=. -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info -Dsonar.exclusions=test/*"
    }
   }
  }


  stage('Store Artifact') {
   steps {
    script {
     sh "tar -czvf ${ARTIFACT} Dockerfile default.conf ${ARTIFACT_FOLDER}/"
     nexusArtifactUploader artifacts: [
      [artifactId: 'angular-openshift', classifier: '', file: "${ARTIFACT}", type: 'tar']
     ], credentialsId: 'poc-dev-nexus', groupId: 'com.aval', nexusUrl: 'nexus.innovacioneveris.tech:80', nexusVersion: 'nexus3', protocol: 'http', repository: 'front-angular/', version: '${BUILD_NUMBER}'
    }
   }
  }

  stage('Create Image Builder') {
  
   when {
    expression {
     openshift.withCluster() {
      openshift.withProject(DEV_PROJECT) {
       return !openshift.selector("bc", "${TEMPLATE_NAME}").exists();
      }
     }
    }
   }
   steps {
    script {
     openshift.withCluster() {
      openshift.withProject(DEV_PROJECT) {
       openshift.newBuild("--name=${TEMPLATE_NAME}", "--docker-image=nginx:mainline-alpine", "--binary=true")
      }
     }
    }
   }
  }
  stage('Build Image') {
   steps {
    script {
     openshift.withCluster() {
      openshift.withProject(env.DEV_PROJECT) {
       openshift.selector("bc", "${TEMPLATE_NAME}").startBuild("--from-archive=${ARTIFACT}", "--wait=true")
      }
     }
    }
   }
  }
  
      stage('Deploy To Dev') {
   when {
    expression {
     openshift.withCluster() {
      openshift.withProject(env.DEV_PROJECT) {
       return !openshift.selector('dc', "${TEMPLATE_NAME}").exists()
      }
     }
    }
   }
   steps {
    script {
     openshift.withCluster() {
      openshift.withProject(env.DEV_PROJECT) {
       def app = openshift.newApp("${TEMPLATE_NAME}:latest")
       app.narrow("svc").expose("--port=${PORT}");
       def dc = openshift.selector("dc", "${TEMPLATE_NAME}")
       while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
        sleep 10
       }
      }
     }
    }
   }
  }

 stage('Push Image') {
  agent { label 'jenkins-slave-image-mgmt' }
  steps {
	script {
    sh "oc login -u pocadmin -p r3dh4t1! --insecure-skip-tls-verify https://masterpoc.az.rhcol.com"
    sh 'skopeo --debug copy --src-creds="\$(oc whoami)":"\$(oc whoami -t)" --src-tls-verify=false --dest-tls-verify=false' + " --dest-creds=pocadmin:r3dh4t1! docker://docker-registry.default.svc:5000/${DEV_PROJECT}/${TEMPLATE_NAME}:latest docker://quay.az.rhcol.com/pocadmin/${TEMPLATE_NAME}:${BUILD_NUMBER} || true"
    sh 'skopeo --debug copy --src-creds=pocadmin:r3dh4t1! --src-tls-verify=false --dest-tls-verify=false' + " --dest-creds=pocadmin:r3dh4t1! docker://quay.az.rhcol.com/pocadmin/${TEMPLATE_NAME}:${BUILD_NUMBER} docker://quay.az.rhcol.com/pocadmin/${TEMPLATE_NAME}:prod || true"
	
	  }
	  }
  }
 
}
}


